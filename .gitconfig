[user]
  name = parksb
  email = parkgds@gmail.com
  signingkey = ~/.ssh/id_ed25519.pub
[core]
  excludesfile = ~/.gitignore
  pager = delta
  autocrlf = input
  editor = nvim
  ignorecase = false
  fsmonitor = true
  untrackedcache = true
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true
[merge]
  conflictstyle = diff3
  tool = nvim
[mergetool "nvim"]
  cmd = nvim -d $LOCAL $MERGED $REMOTE -c 'wincmd w' -c 'wincmd J'
  keepBackup = false
[diff]
  colorMoved = default
[commit]
  template = ~/.stCommitMsg
  gpgSign = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[alias]
  alias = "!# Show all aliases;\n\
    git config --list \
    | egrep '^alias.+' \
    | sed -e 's/^alias\\.//' \
    | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' \
    | column -t -s'=' \
    | sed 's/!#* *//; s/;$//' \
    | cut -c1-85"
  s = "!# git status -s;\n\
       git status -s"
  l = "!# git log --oneline --graph --decorate --color;\n\
       git log --oneline --graph --decorate --color"
  la = "!# git log --all --oneline --graph --decorate --color;\n\
       git log --all --oneline --graph --decorate --color"
  lr = "!# git log --reflog --graph --oneline --decorate --color;\n\
       git log --reflog --graph --oneline --decorate --color"
  ch = "!# git checkout;\n\
        _height=$(stty size | awk '{print $1}');\
        git branch -r | egrep -v '^\\*' | fzf --preview \"git log --graph --oneline --decorate --color {1} | head -n $_height\" | xargs git checkout;"
  sw = "!# git switch;\n\
        _height=$(stty size | awk '{print $1}');\
        git branch -a | grep -v origin | egrep -v '^\\*' | fzf --preview \"git log --graph --oneline --decorate --color {1} | head -n $_height\" | xargs git switch;"
  re = "!# git reset;\n\
        _height=$(stty size | awk '{print $1}');\
        git log --pretty=format:\"%h : %s\" | fzf --preview \"git log --graph --oneline --decorate --color | head -n $_height\" | awk '{gsub(/ : .*/, \"\", $0); print $0}' | xargs git reset;"
  a = "!# git add;\n\
       _height=$(stty size | awk '{print $1}');\
       git status -s | fzf -m --preview \"git diff {2} | head -n $_height | delta\" | awk '{print $2}' | xargs git add;"
  aa = "!# git add --all;\n\
        git add --all"
  ap = "!# git add -p\n\
        _height=$(stty size | awk '{print $1}');\
        git status -s | fzf --preview \"git diff {2} | head -n $_height | delta\" | awk '{print $2}' | xargs git add -p;"
  c = "!# git commit;\n\
       git commit"
  cv = "!# git commit -v;\n\
        git commit -v"
  cm = "!# git commit -m, git cm {message};\n\
       git commit -m"
  cun = "!# git reset HEAD~, Undo last commit;\n\
        git reset HEAD~"
  b = "!# git branch;\n\
      git branch"
  ba = "!# git branch -a, Show all branches;\n\
       git branch -a"
  bd = "!# git branch -D, git bd {branch}, Delete a branch;\n\
       git branch -D"
  bn = "!# git switch -c, git bn {branch}, Create a new branch and switch;\n\
       git switch -c"
  st = "!# git stash;\n\
       git stash"
  sts = "!# git stash save -k, git sts {stash}, Save a named stash;\n\
        git stash save -k"
  stl = "!# stash list, Show all stashes;\n\
         _height=$(stty size | awk '{print $1}'); git stash list | awk '{gsub(/:/, \"\", $1); print $0}' |  fzf --preview \"git stash show -p {1} | head -n $_height | delta\";"
  stp = "!# git stash pop, Pop the stash;\n\
         _height=$(stty size | awk '{print $1}'); git stash list | awk '{gsub(/:/, \"\", $1); print $0}' | fzf --preview \"git stash show -p {1} | head -n $_height | delta\" | awk '{gsub(/:/, \"\", $1); print $1}' | xargs git stash pop;"
  std = "!# git stash drop, Drop the stash;\n\
         _height=$(stty size | awk '{print $1}'); git stash list | awk '{gsub(/:/, \"\", $1); print $0}' | fzf --preview \"git stash show -p {1} | head -n $_height | delta\" | awk '{gsub(/:/, \"\", $1); print $1}' | xargs git stash drop;"
  pl = "!# git pull;\n\
       git pull"
  plr = "!# git pull --rebase origin {branch};\n\
         git branch | awk '/^\\*/{print $2}' | xargs git pull --rebase origin"
  ps = "!# git push;\n\
       git push"
  pso = "!# git push origin {branch}, Push to current branch of the origin repo;\n\
         git branch | awk '/^\\*/{print $2}' | xargs git push origin"
  sub = "!# git restore --staged, Unstage the staged files\n\
         git diff --name-only --cached | fzf -m | xargs git restore --staged;"
  dtn = "!# git clean -f --, Discard the changes of the untracked files;\n\
         git status -s | awk '{print $2}' | fzf -m | xargs git clean -f --"
  dtna = "!# git clean -fd, Discard all untracked changes;\n\
         git clean -fd --dry-run; read -p \"Are you sure? [y/N] \" -r; echo; if [[ $REPLY =~ ^[Yy]$ ]]; then git clean -fd; fi"
  dt = "!# git restore, Discard the changes of the tracked files;\n\
        git status -s -uno | awk '{print $2}' | fzf -m | xargs git restore"
  dta = "!# git reset --hard, Discard the all staged changes;\n\
        git reset --hard"
  r = "!# git rebase;\n\
      git rebase"
  ron = "!# git rebase --onto;\n\
      git rebase --onto"
  rc = "!# git rebase --continue;\n\
       git rebase --continue"
  ra = "!# git rebase --abort;\n\
       git rebase --abort"
  rs = "!# git rebase --skip;\n\
        git rebase --skip"
  ui = "!ungit"
  rv = "!# git revert;\n\
        git revert"
  cp = "!# git cherry-pick;\n\
        git cherry-pick"
  fo = "!# git fetch origin;\n\
        git fetch origin"
  dfo = "!# git diff origin;\n\
        git diff origin"
  ignore = "!# generate .gitignore file;\n\
        curl -sL https://www.toptal.com/developers/gitignore/api/$@"
[fetch]
  purne = true
[init]
  defaultBranch = main
[gpg]
  format = ssh
[pull]
  ff = only
[include]
  path = ~/.delta-themes.gitconfig
[include]
  path = ~/.local.gitconfig
